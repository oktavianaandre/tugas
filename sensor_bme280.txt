#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <WebServer.h>
#include <ESPmDNS.h>
#include <InfluxDbClient.h>
#include <InfluxDbCloud.h>

#if defined(ESP32)
#include <WiFiMulti.h>
WiFiMulti wifiMulti;
#define DEVICE "ESP32"
#elif defined(ESP8266)
#include <ESP8266WiFiMulti.h>
ESP8266WiFiMulti wifiMulti;
#define DEVICE "ESP8266"
#endif

// BME280 I2C address
#define BME280_I2C_ADDRESS 0x76

Adafruit_BME280 bme; // BME280 instance

// WiFi credentials
const char* default_ssid = "DMIA-GUEST";
const char* default_password = "#dM1@2024";
char ssid[32];
char password[32];

// InfluxDB configuration
  #define INFLUXDB_URL "https://us-east-1-1.aws.cloud2.influxdata.com"
  #define INFLUXDB_TOKEN "oeTrq9h2B-W5_v8PBKJ_pLrpDGRJtQdse9Ro-k15j3hHn904mngriIy8mvjQX970KbnTZp4S_LtXL6kbwSfsJw=="
  #define INFLUXDB_ORG "d2370a2783aaefd5"
  #define INFLUXDB_BUCKET "suhuesp"
#define TZ_INFO "UTC7"

InfluxDBClient client(INFLUXDB_URL, INFLUXDB_ORG, INFLUXDB_BUCKET, INFLUXDB_TOKEN, InfluxDbCloud2CACert);
Point sensor("bme280_sensor");

// Web server
WebServer server(80);

void handleRoot();
void handleConfig();
void handleIP();
void connectWiFi(const char* ssid, const char* password);

void setup() {
  Serial.begin(115200);
  strcpy(ssid, default_ssid);
  strcpy(password, default_password);
  
  connectWiFi(ssid, password);

  // Setup handler for root page
  server.on("/", handleRoot);
  // Setup handler for WiFi configuration
  server.on("/config", HTTP_POST, handleConfig);
  // Setup handler for displaying IP address
  server.on("/ip", handleIP);

  // Start the server
  server.begin();
  Serial.println("HTTP server started");

  // Start mDNS
  if (!MDNS.begin("esp32")) {
    Serial.println("Error setting up MDNS responder!");
  } else {
    Serial.println("mDNS responder started: https://esp32.local");
  }

  // Accurate time is necessary for certificate validation and writing in batches
  timeSync(TZ_INFO, "pool.ntp.org", "time.nis.gov");

  // Check server connection
  Serial.print("Validating InfluxDB connection to ");
  Serial.println(INFLUXDB_URL);
  if (client.validateConnection()) {
    Serial.print("Connected to InfluxDB: ");
    Serial.println(client.getServerUrl());
  } else {
    Serial.print("InfluxDB connection failed: ");
    Serial.println(client.getLastErrorMessage());
  }

  // Initialize BME280 sensor
  if (!bme.begin(BME280_I2C_ADDRESS)) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }

  // Add tags to the data point
  sensor.addTag("device", DEVICE);
}

void loop() {
  server.handleClient();

  // Read data from BME280 sensor
  float temperature = bme.readTemperature();
  float humidity = bme.readHumidity();

  // Clear fields for reusing the point. Tags will remain the same as set above.
  sensor.clearFields();

  // Store measured values into point
  sensor.addField("1humid", humidity);
  sensor.addField("1temp", temperature);

  // Print what we are exactly writing
  Serial.print("Writing: ");
  Serial.println(sensor.toLineProtocol());

  // Check WiFi connection and reconnect if needed
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi connection lost");
    return;
  }

  // Write point
  if (!client.writePoint(sensor)) {
    Serial.print("InfluxDB write failed: ");
    Serial.println(client.getLastErrorMessage());
  } else {
    Serial.println("InfluxDB write successful");
  }

  // Display data on Serial Monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" Â°C");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  Serial.println("===================");

  delay(3000); // Send data every 3 seconds
}

// Connect to WiFi
void connectWiFi(const char* ssid, const char* password) {
  Serial.print("Connecting to WiFi ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  // Wait until the connection succeeds or fails
  int attempts = 0;
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    attempts++;
    if (attempts > 20) {
      Serial.println("Connection failed.");
      return;
    }
  }

  Serial.println("");
  Serial.println("WiFi connected successfully");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Restart mDNS with the new IP address
  MDNS.end();
  if (!MDNS.begin("esp32")) {
    Serial.println("Error setting up mDNS responder!");
  } else {
    Serial.println("mDNS responder started: https://esp32.local");
  }
}

// Handle requests to the root page
void handleRoot() {
  // HTML form for configuring WiFi
  String html = "<html><head><title>ESP32 WiFi Configuration</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; margin: 0; padding: 0;}";
  html += "h1 { text-align: center; margin-top: 20px; }";
  html += "form { max-width: 300px; margin: 0 auto; }";
  html += "input[type='text'], input[type='password'] { width: 100%; padding: 10px; margin: 5px 0; }";
  html += "input[type='submit'] { width: 100%; padding: 10px; margin-top: 10px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }";
  html += "</style>";
  html += "</head><body>";
  html += "<h1>ESP32 WiFi Configuration</h1>";
  html += "<form method='post' action='/config'>";
  html += "SSID: <input type='text' name='ssid'><br>";
  html += "Password: <input type='password' name='password'><br>";
  html += "<input type='submit' value='Submit'></form>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

// Function to handle POST requests from the WiFi configuration form
void handleConfig() {
  if (server.method() == HTTP_POST) {
    String new_ssid = server.arg("ssid");
    String new_password = server.arg("password");
    new_ssid.toCharArray(ssid, sizeof(ssid));
    new_password.toCharArray(password, sizeof(password));

    // Attempt to connect to WiFi with new SSID and password
    connectWiFi(ssid, password);

    // Send response with new IP address
    String html = "<html><head><title>ESP32 IP</title></head><body>";
    html += "<h1>ESP32 IP Address</h1><p>IP address: ";
    html += WiFi.localIP().toString();
    html += "</p></body></html>";
    server.send(200, "text/html", html);
  }
}

// Function to display IP address when connected to a hotspot
void handleIP() {
  // HTML response displaying IP address
  String html = "<html><head><title>ESP32 IP Address</title></head><body>";
  html += "<h1>ESP32 IP Address</h1><p>IP address: ";
  html += WiFi.localIP().toString();
  html += "</p></body></html>";

  server.send(200, "text/html", html);
}
